package com.music.app.storage.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.music.app.model.OnlineMusic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ONLINE_MUSIC".
*/
public class OnlineMusicDao extends AbstractDao<OnlineMusic, Long> {

    public static final String TABLENAME = "ONLINE_MUSIC";

    /**
     * Properties of entity OnlineMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pic_big = new Property(1, String.class, "pic_big", false, "PIC_BIG");
        public final static Property Pic_small = new Property(2, String.class, "pic_small", false, "PIC_SMALL");
        public final static Property Lrclink = new Property(3, String.class, "lrclink", false, "LRCLINK");
        public final static Property Song_id = new Property(4, String.class, "song_id", false, "SONG_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Ting_uid = new Property(6, String.class, "ting_uid", false, "TING_UID");
        public final static Property Album_title = new Property(7, String.class, "album_title", false, "ALBUM_TITLE");
        public final static Property Artist_name = new Property(8, String.class, "artist_name", false, "ARTIST_NAME");
    }


    public OnlineMusicDao(DaoConfig config) {
        super(config);
    }
    
    public OnlineMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ONLINE_MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PIC_BIG\" TEXT," + // 1: pic_big
                "\"PIC_SMALL\" TEXT," + // 2: pic_small
                "\"LRCLINK\" TEXT," + // 3: lrclink
                "\"SONG_ID\" TEXT," + // 4: song_id
                "\"TITLE\" TEXT," + // 5: title
                "\"TING_UID\" TEXT," + // 6: ting_uid
                "\"ALBUM_TITLE\" TEXT," + // 7: album_title
                "\"ARTIST_NAME\" TEXT);"); // 8: artist_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ONLINE_MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OnlineMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(2, pic_big);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(3, pic_small);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(4, lrclink);
        }
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(5, song_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(7, ting_uid);
        }
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(8, album_title);
        }
 
        String artist_name = entity.getArtist_name();
        if (artist_name != null) {
            stmt.bindString(9, artist_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OnlineMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(2, pic_big);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(3, pic_small);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(4, lrclink);
        }
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(5, song_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(7, ting_uid);
        }
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(8, album_title);
        }
 
        String artist_name = entity.getArtist_name();
        if (artist_name != null) {
            stmt.bindString(9, artist_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OnlineMusic readEntity(Cursor cursor, int offset) {
        OnlineMusic entity = new OnlineMusic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pic_big
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pic_small
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lrclink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // song_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ting_uid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // album_title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // artist_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OnlineMusic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPic_big(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPic_small(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLrclink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSong_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTing_uid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlbum_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArtist_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OnlineMusic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OnlineMusic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OnlineMusic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
